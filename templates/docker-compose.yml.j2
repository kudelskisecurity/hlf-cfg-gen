version: '2'

networks:
  basic:

services:
  #########################################################################################################
  # orderers
  #########################################################################################################
{% for ord in ords %}
  orderer{{ ord.id }}.{{ domain }}:
    container_name: orderer{{ ord.id }}.{{ domain }}
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
      - CONFIGTX_ORDERER_ORDERERTYPE=kafka
      - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0.{{ domain }}:9092,kafka1.{{ domain }}:9092,kafka2.{{ domain }}:9092,kafka3.{{domain}}:9092]
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    volumes:
        - ./config/:/etc/hyperledger/configtx
        - ./crypto-config/ordererOrganizations/{{ domain }}/orderers/orderer{{ ord.id }}.{{ domain }}/:/etc/hyperledger/msp/orderer
        - ./crypto-config/peerOrganizations/org1.{{ domain }}/peers/peer0.org1.{{ domain }}/:/etc/hyperledger/msp/peerOrg1
    depends_on:
      - kafka0.{{ domain }}
      - kafka1.{{ domain }}
      - kafka2.{{ domain }}
      - kafka3.{{ domain }}
    ports:
      - {{ ord.port }}:7050
    networks:
      - basic
{% endfor %}

  #########################################################################################################
  # kafka
  #########################################################################################################
  kafka0.{{ domain }}:
    container_name: kafka0.{{ domain }}
    image: hyperledger/fabric-kafka
    environment:
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.{{ domain }}:2181,zookeeper1.{{ domain }}:2181,zookeeper2.{{ domain }}:2181
      - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=1048576
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9092
    networks:
      - basic
    depends_on:
      - zookeeper0.{{ domain }}
      - zookeeper1.{{ domain }}
      - zookeeper2.{{ domain }}

  kafka1.{{ domain }}:
    container_name: kafka1.{{ domain }}
    image: hyperledger/fabric-kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.{{ domain }}:2181,zookeeper1.{{ domain }}:2181,zookeeper2.{{ domain }}:2181
      - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=1048576
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9092
    networks:
      - basic
    depends_on:
      - zookeeper0.{{ domain }}
      - zookeeper1.{{ domain }}
      - zookeeper2.{{ domain }}

  kafka2.{{ domain }}:
    container_name: kafka2.{{ domain }}
    image: hyperledger/fabric-kafka
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.{{ domain }}:2181,zookeeper1.{{ domain }}:2181,zookeeper2.{{ domain }}:2181
      - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=1048576
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9092
    networks:
      - basic
    depends_on:
      - zookeeper0.{{ domain }}
      - zookeeper1.{{ domain }}
      - zookeeper2.{{ domain }}

  kafka3.{{ domain }}:
    container_name: kafka3.{{ domain }}
    image: hyperledger/fabric-kafka
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.{{ domain }}:2181,zookeeper1.{{ domain }}:2181,zookeeper2.{{ domain }}:2181
      - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=1048576
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
    ports:
      - 9092
    networks:
      - basic
    depends_on:
      - zookeeper0.{{ domain }}
      - zookeeper1.{{ domain }}
      - zookeeper2.{{ domain }}

  #########################################################################################################
  # zookeeper
  #########################################################################################################
  zookeeper0.{{ domain }}:
    container_name: zookeeper0.{{ domain }}
    image: hyperledger/fabric-zookeeper
    environment:
      - ZOO_SERVERS=server.1=zookeeper0.{{ domain }}:2888:3888 server.2=zookeeper1.{{ domain }}:2888:3888 server.3=zookeeper2.{{ domain }}:2888:3888
      - ZOO_MY_ID=1
    ports:
      - 2181
      - 2888
      - 3888
    networks:
      - basic

  zookeeper1.{{ domain }}:
    container_name: zookeeper1.{{ domain }}
    image: hyperledger/fabric-zookeeper
    environment:
      - ZOO_SERVERS=server.1=zookeeper0.{{ domain }}:2888:3888 server.2=zookeeper1.{{ domain }}:2888:3888 server.3=zookeeper2.{{ domain }}:2888:3888
      - ZOO_MY_ID=2
    ports:
      - 2181
      - 2888
      - 3888
    networks:
      - basic

  zookeeper2.{{ domain }}:
    container_name: zookeeper2.{{ domain }}
    image: hyperledger/fabric-zookeeper
    environment:
      - ZOO_SERVERS=server.1=zookeeper0.{{ domain }}:2888:3888 server.2=zookeeper1.{{ domain }}:2888:3888 server.3=zookeeper2.{{ domain }}:2888:3888
      - ZOO_MY_ID=3
    ports:
      - 2181
      - 2888
      - 3888
    networks:
      - basic

  #########################################################################################################
  # peers
  #########################################################################################################
{% for org in orgs %}
  {% for peer in org.peers %}
  peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:
    container_name: peer{{ peer.id }}.org{{ org.id }}.{{ domain }}
    image: hyperledger/fabric-peer
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ID=peer{{ peer.id }}.org{{ org.id }}.{{ domain }}
      - CORE_PEER_LOCALMSPID=Org{{ org.id }}MSP
      - CORE_PEER_ADDRESS=peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:7051
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    ports:
      - {{ peer.service }}:7051
      - {{ peer.event }}:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org{{ org.id }}.{{ domain }}/peers/peer{{ peer.id }}.org{{ org.id }}.{{ domain }}/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/org{{ org.id }}.{{ domain }}/users:/etc/hyperledger/msp/users
      - ./config:/etc/hyperledger/configtx
{% if persistence %}
      # this adds persistence
      - ./persistence/peers-data/peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:/var/hyperledger/production
{% endif %}
    depends_on:
      - orderer0.{{ domain }}
      - orderer1.{{ domain }}
      - orderer2.{{ domain }}
      - orderer3.{{ domain }}
      - couchdb.peer{{ peer.id }}.org{{ org.id }}.{{ domain }}
    networks:
      - basic

  {% endfor %}
{% endfor %}
  #########################################################################################################
  # couchdb
  #########################################################################################################
{% for org in orgs %}
  {% for peer in org.peers %}
  couchdb.peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:
    container_name: couchdb.peer{{ peer.id }}.org{{ org.id }}.{{ domain }}
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
{% if persistence %}
    volumes:
      # this adds persistence
      - ./persistence/couchdb-data/couchdb.peer{{ peer.id }}.org{{ org.id }}.{{ domain }}:/opt/couchdb/data
{% endif %}
    networks:
      - basic

  {% endfor %}
{% endfor %}
  #########################################################################################################
  # cli
  #########################################################################################################
{% for cli in clis %}
  cli{{ cli.id }}:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.{{ domain }}:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.{{ domain }}/users/Admin@org1.{{ domain }}/msp
      - CORE_CHAINCODE_KEEPALIVE=10
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
    networks:
        - basic
    ports:
        - {{ cli.port }}:8000
{% endfor %}
